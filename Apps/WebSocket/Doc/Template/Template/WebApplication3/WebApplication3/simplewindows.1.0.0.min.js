(function (d, m, g, h) {
    function k(a, c) {
        this.element = a; this.options = d.extend({}, l, c); this.options.arrangeKey = this.options.arrangeKey.charCodeAt(0) - 32; d.each(this.options.keys, function (a) { a = d(this)[0]; typeof a.key == h || d.isNumeric(a.key) || (a.key = a.key.charCodeAt(0) - 32) }); this._defaults = l; this._name = f; this.Parent = a.parentElement || a.parentNode; this.init(); d(this.Parent).off(); d(this.Parent).on({
            mousemove: function (a) { a.preventDefault(); d.fn.simpleWindows.set(a) }, mouseup: function () {
                simWinGlobal.Parent.children(".winBox").children(".winResize").removeClass("winResizeClicked");
                simWinGlobal.move = !1; simWinGlobal.resize = !1
            }, mouseleave: function () { simWinGlobal.Parent.children(".winBox").children(".winResize").removeClass("winResizeClicked"); simWinGlobal.move = !1; simWinGlobal.resize = !1 }
        }); d(g).off("keyup"); d(g).on({ keyup: function (a) { a.preventDefault(); d.fn.simpleWindows.key(a) } })
    } "undefined" == typeof simWinGlobal && (simWinGlobal = {}); var f = "simpleWindows", l = {
        source: d('<textarea style =  "width:100%;height:100%;"></textarea>'), headerText: "New Window", funcKey: "altKey", arrangeKey: "c",
        keys: {}, dimension: { top: 20, left: 20, width: 800, height: 300 }, event: { clickY: 0, clickX: 0 }
    }; simWinGlobal.Parent = h; simWinGlobal.active = 0; simWinGlobal.move = !1; simWinGlobal.resize = !1; k.prototype = {
        init: function () {
            var a = d(this.element), c; a.children() && (c = a.html()); a.css("opacity", 0); a.addClass("winBox"); var b; b = '<div class="winHeader" unselectable="on" title="Restore Down"><span></span></div>'; b += '<div class="winClose" title="Close">X</div>'; b += '<div class="winMinimize" title="Minimize">--</div>'; b += '<div class="winBody"></div>';
            b += '<div class="winResize"></div>'; a.html(b); b = this.options.dimension; a.css({ top: b.top, left: b.left, width: b.width, height: b.height }); b = a.children(".winHeader"); var e = a.children(".winBody"); a.children(".winMinimize"); b.children("span").html(this.options.headerText); 0 != c.length ? e.html(c) : e.append(this.options.source); this.options.source = e.html(); e.height(a.height() - b.height()); simWinGlobal.active = a; a.attr("tabindex", 0); simWinGlobal.Parent = a.parent(); simWinGlobal.winBody = a.children(".winBody"); z = d.fn.simpleWindows.getMaxZ(simWinGlobal.Parent.children(".winBox"));
            a.css("z-index", z + 1); a.on({ click: function () { a.children(".winBody").remove(); a.fadeOut(100, function () { a.remove(); delete a }) } }, ".winClose"); a.on({ mousedown: function () { simWinGlobal.active = d(this); d(this).focus(); simWinGlobal.Parent = d(this).parent(); simWinGlobal.winBody = d(this).children(".winBody"); var b = d.fn.simpleWindows.getMaxZ(d(this).parent().children(".winBox")); a.css("z-index", b + 1) } }); a.on({
                dblclick: function () { a.data().plugin_simpleWindows.resizeTo(d(this).parent(".winBox"), "fullScreen") }, mousedown: function (b) {
                    simWinGlobal.Parent.children(".winBox").children(".winResize").addClass("winResizeClicked");
                    b.preventDefault(); a.data().plugin_simpleWindows.getCilck(a, b); simWinGlobal.move = !0
                }
            }, ".winHeader"); a.on({ mousedown: function (b) { simWinGlobal.Parent.children(".winBox").children(".winResize").addClass("winResizeClicked"); b.preventDefault(); a.data().plugin_simpleWindows.getCilck(a, b); simWinGlobal.resize = !0 } }, ".winResize"); a.on({ click: function () { a.data().plugin_simpleWindows.resizeTo(d(this).parent(".winBox"), "minimize") } }, ".winMinimize"); a.animate({ opacity: 1 }, 100)
        }, getCilck: function (a, c) {
            var b = a.data().plugin_simpleWindows.options.event;
            b.clickX = (c.offsetX || c.originalEvent.layerX) + (a.outerWidth(!0) - a.width()) / 2; b.clickY = (c.offsetY || c.originalEvent.layerY) + (a.outerHeight(!0) - a.height()) / 2
        }, resizeTo: function (a, c) {
            var b = a.data().plugin_simpleWindows.options.dimension, e = a.parent(), e = "fullScreen" == c ? { top: 0, left: 0, width: e.outerWidth(!0) - (a.outerWidth(!0) - a.width()) - (e.outerWidth(!0) - e.width()), height: e.outerHeight(!0) - (a.outerHeight(!0) - a.height()) - (e.outerHeight(!0) - e.height()) } : { top: 0, left: 0, width: 0, height: a.children(".winHeader").height() };
            b.width != e.width && b.height != e.height ? (oldCSS = b, a.animate(e, 100), a.data().plugin_simpleWindows.options.dimension = e, a.children(".winBody").animate({ height: e.height - a.children(".winHeader").height() }, 100)) : (a.animate(oldCSS, 100), a.data().plugin_simpleWindows.options.dimension = oldCSS, a.children(".winBody").animate({ height: oldCSS.height - a.children(".winHeader").height() }, 100))
        }
    }; d.fn[f] = function (a) { return this.each(function () { d.data(this, "plugin_" + f) || d.data(this, "plugin_" + f, new k(this, a)) }) }; d.fn[f].key =
    function (a) {
        var c = simWinGlobal.active.data().plugin_simpleWindows.options.arrangeKey, b = simWinGlobal.active.data().plugin_simpleWindows.options.keys, e = simWinGlobal.active.data().plugin_simpleWindows.options.funcKey; !1 != a[e] && (a.keyCode == c ? (c = simWinGlobal.Parent.children(".winBox"), b = simWinGlobal.active.index(), e = d.fn.simpleWindows.getMaxZ(c), b < c.length - 1 ? b++ : b = 0, simWinGlobal.active = c.eq(b), simWinGlobal.Parent = c.eq(b).parent(), simWinGlobal.winBody = c.eq(b).children(".winBody"), c.eq(b).css("z-index",
        e + 1)) : d.each(b, function (b) { b = d(this)[0]; a.keyCode == b.key && b.resFunction() }))
    }; d.fn[f].getMaxZ = function (a) { var c = 0, b = 0; d.each(a, function (a) { c = Number(d(this).css("z-index")); c > b && (b = c) }); return b }; d.fn[f].ajaxCall = function (a, c, b) { var e = !1; a && d.ajax({ url: a, type: "POST", dataType: "xml/html/script/json/jsonp", data: { order: c, param: b }, async: !1, complete: function (a, b, c) { e = a.responseText }, success: function (a, b, c) { }, error: function (a, b, c) { } }); return e }; d.fn[f].set = function (a) {
        if ("undefined" != typeof simWinGlobal.active &&
        (simWinGlobal.resize || simWinGlobal.move)) {
            var c = simWinGlobal.active, b = simWinGlobal.Parent, e = c.data().plugin_simpleWindows.options.dimension, d = a.pageY; a = a.pageX; if (simWinGlobal.resize) e.width = a - c.offset().left, e.height = d - c.offset().top, c.css({ width: e.width, height: e.height }), c.children(".winBody").height(e.height - c.children(".winHeader").height()); else if (simWinGlobal.move) {
                var f = c.data().plugin_simpleWindows.options.event.clickX, g = c.data().plugin_simpleWindows.options.event.clickY; 0 > d - b.offset().top -
                g ? e.top = 0 : e.top = d - b.offset().top - g; 0 > a - b.offset().left - f ? e.left = 0 : e.left = a - b.offset().left - f; c.css({ top: e.top, left: e.left })
            }
        }
    }
})(jQuery, window, document);